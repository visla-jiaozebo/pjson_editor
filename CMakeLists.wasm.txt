cmake_minimum_required(VERSION 3.20)
project(PJsonEditor VERSION 1.0.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Emscripten-specific settings
if(EMSCRIPTEN)
    set(CMAKE_EXECUTABLE_SUFFIX ".js")
    
    # Emscripten compiler flags
    set(EMSCRIPTEN_COMPILE_FLAGS
        -O3
        -s WASM=1
        -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap']
        -s ALLOW_MEMORY_GROWTH=1
        -s INITIAL_MEMORY=33554432
        -s MAXIMUM_MEMORY=134217728
        -s STACK_SIZE=1048576
        -s MODULARIZE=1
        -s EXPORT_NAME='PJsonEditor'
        -s ENVIRONMENT='web,worker'
        --bind
    )
    
    # Debug flags for development
    set(EMSCRIPTEN_DEBUG_FLAGS
        -g
        -s ASSERTIONS=1
        -s SAFE_HEAP=1
        -s DEMANGLE_SUPPORT=1
    )
    
    # Convert list to string
    string(JOIN " " EMSCRIPTEN_FLAGS_STR ${EMSCRIPTEN_COMPILE_FLAGS})
    string(JOIN " " EMSCRIPTEN_DEBUG_STR ${EMSCRIPTEN_DEBUG_FLAGS})
    
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EMSCRIPTEN_FLAGS_STR}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EMSCRIPTEN_FLAGS_STR}")
    
    # Add debug flags for debug builds
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${EMSCRIPTEN_DEBUG_STR}")
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${EMSCRIPTEN_DEBUG_STR}")
endif()

# Use FetchContent to get nlohmann_json
include(FetchContent)
FetchContent_Declare(
    nlohmann_json
    GIT_REPOSITORY https://github.com/nlohmann/json.git
    GIT_TAG v3.11.3
)
FetchContent_MakeAvailable(nlohmann_json)

# Library target
add_library(pjson_editor 
    src/ControllerAPI.cpp
    src/DataStore.cpp
)

target_include_directories(pjson_editor
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/include
)

target_link_libraries(pjson_editor
    PUBLIC
        nlohmann_json::nlohmann_json
)

# WebAssembly API bindings
if(EMSCRIPTEN)
    add_executable(pjson_wasm
        ../wasm_bindings.cpp
    )
    
    target_link_libraries(pjson_wasm
        PRIVATE
            pjson_editor
    )
    
    # Set additional Emscripten-specific properties
    set_target_properties(pjson_wasm PROPERTIES
        LINK_FLAGS "--bind -s EXPORTED_FUNCTIONS=['_malloc','_free']"
    )
endif()

# Native CLI executable (for testing)
if(NOT EMSCRIPTEN)
    add_executable(pjson_cli
        src/main_extended.cpp
    )
    
    target_link_libraries(pjson_cli
        PRIVATE
            pjson_editor
    )
    
    # Test executables (only for native builds)
    add_executable(test_extended_models
        tests/test_extended_models.cpp
    )
    
    target_link_libraries(test_extended_models
        PRIVATE
            pjson_editor
    )
    
    add_executable(test_all_operations
        tests/test_all_operations.cpp
    )
    
    target_link_libraries(test_all_operations
        PRIVATE
            pjson_editor
    )
endif()
